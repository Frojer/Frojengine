#pragma once

#include "Frojengine.h"

class FJFontEngine;

// Rasterizer     Fill Cull Clockwise DepthClip Scissor Multisample AntialiasedLine
// Bit(1byte)   : 0    00   0         0         0       0           0
enum
{
	RS_SOLID = 0x00,
	RS_WIREFRAME = 0x80,
	RS_CULL_NONE = 0x00,
	RS_CULL_FRONT = 0x40,
	RS_CULL_BACK = 0x20,
	RS_CLOCKWISE = 0x00,
	RS_COUNTER_CLOCKWISE = 0x10,
	RS_DEPTH_CLIP_ON = 0x00,
	RS_DEPTH_CLIP_OFF = 0x08,
	RS_SCISSOR_ON = 0x04,
	RS_SCISSOR_OFF = 0x00,
	RS_MULTISAMPLE_ON = 0x02,
	RS_MULTISAMPLE_OFF = 0x00,
	RS_ANTIALIASEDLINE_ON = 0x01,
	RS_ANTIALIASEDLINE_Off = 0x00
};

// DepthStencil   DT DW DC  SE SFFO SFDFO SFPO SFC SBFO SBDFO SBPO SBC TEMP
// Bit(4byte)   : 0  0  000 0  000  000   000  000 000  000   000  000 00
enum
{
	DS_DEPTH_TEST_ON = 0x00000000,
	DS_DEPTH_TEST_OFF = 0x80000000,
	DS_DEPTH_WRITE_ON = 0x00000000,
	DS_DEPTH_WRITE_OFF = 0x40000000,
	DS_DEPTH_COMPARISON_NEVER = 0x08000000,
	DS_DEPTH_COMPARISON_LESS = 0x00000000,
	DS_DEPTH_COMPARISON_EQUAL = 0x10000000,
	DS_DEPTH_COMPARISON_LESS_EQUAL = 0x18000000,
	DS_DEPTH_COMPARISON_GREATER = 0x20000000,
	DS_DEPTH_COMPARISON_NOT_EQUAL = 0x28000000,
	DS_DEPTH_COMPARISON_GREATER_EQUAL = 0x30000000,
	DS_DEPTH_COMPARISON_ALWAYS = 0x38000000,
	DS_STENCIL_ON = 0x04000000,
	DS_STENCIL_OFF = 0x00000000,
	DS_STENCIL_FRONT_FAIL_OP_KEEP = 0x00000000,
	DS_STENCIL_FRONT_FAIL_OP_ZERO = 0x00800000,
	DS_STENCIL_FRONT_FAIL_OP_REPLACE = 0x01000000,
	DS_STENCIL_FRONT_FAIL_OP_INCR_SAT = 0x01800000,
	DS_STENCIL_FRONT_FAIL_OP_DECR_SAT = 0x02000000,
	DS_STENCIL_FRONT_FAIL_OP_INVERT = 0x02800000,
	DS_STENCIL_FRONT_FAIL_OP_INCR = 0x03000000,
	DS_STENCIL_FRONT_FAIL_OP_DECR = 0x03800000,
	DS_STENCIL_FRONT_DEPTH_FAIL_OP_KEEP = 0x00000000,
	DS_STENCIL_FRONT_DEPTH_FAIL_OP_ZERO = 0x00100000,
	DS_STENCIL_FRONT_DEPTH_FAIL_OP_REPLACE = 0x00200000,
	DS_STENCIL_FRONT_DEPTH_FAIL_OP_INCR_SAT = 0x00300000,
	DS_STENCIL_FRONT_DEPTH_FAIL_OP_DECR_SAT = 0x00400000,
	DS_STENCIL_FRONT_DEPTH_FAIL_OP_INVERT = 0x00500000,
	DS_STENCIL_FRONT_DEPTH_FAIL_OP_INCR = 0x00600000,
	DS_STENCIL_FRONT_DEPTH_FAIL_OP_DECR = 0x00700000,
	DS_STENCIL_FRONT_PASS_OP_KEEP = 0x00000000,
	DS_STENCIL_FRONT_PASS_OP_ZERO = 0x00020000,
	DS_STENCIL_FRONT_PASS_OP_REPLACE = 0x00040000,
	DS_STENCIL_FRONT_PASS_OP_INCR_SAT = 0x00060000,
	DS_STENCIL_FRONT_PASS_OP_DECR_SAT = 0x00080000,
	DS_STENCIL_FRONT_PASS_OP_INVERT = 0x000A0000,
	DS_STENCIL_FRONT_PASS_OP_INCR = 0x000C0000,
	DS_STENCIL_FRONT_PASS_OP_DECR = 0x000E0000,
	DS_STENCIL_FRONT_COMPARISON_NEVER = 0x00004000,
	DS_STENCIL_FRONT_COMPARISON_LESS = 0x00008000,
	DS_STENCIL_FRONT_COMPARISON_EQUAL = 0x0000C000,
	DS_STENCIL_FRONT_COMPARISON_LESS_EQUAL = 0x00010000,
	DS_STENCIL_FRONT_COMPARISON_GREATER = 0x00014000,
	DS_STENCIL_FRONT_COMPARISON_NOT_EQUAL = 0x00018000,
	DS_STENCIL_FRONT_COMPARISON_GREATER_EQUAL = 0x0001C000,
	DS_STENCIL_FRONT_COMPARISON_ALWAYS = 0x00000000,
	DS_STENCIL_BACK_FAIL_OP_KEEP = 0x00000000,
	DS_STENCIL_BACK_FAIL_OP_ZERO = 0x00000800,
	DS_STENCIL_BACK_FAIL_OP_REPLACE = 0x00001000,
	DS_STENCIL_BACK_FAIL_OP_INCR_SAT = 0x00001800,
	DS_STENCIL_BACK_FAIL_OP_DECR_SAT = 0x00002000,
	DS_STENCIL_BACK_FAIL_OP_INVERT = 0x00002800,
	DS_STENCIL_BACK_FAIL_OP_INCR = 0x00003000,
	DS_STENCIL_BACK_FAIL_OP_DECR = 0x00003800,
	DS_STENCIL_BACK_DEPTH_FAIL_OP_KEEP = 0x00000000,
	DS_STENCIL_BACK_DEPTH_FAIL_OP_ZERO = 0x00000100,
	DS_STENCIL_BACK_DEPTH_FAIL_OP_REPLACE = 0x00000200,
	DS_STENCIL_BACK_DEPTH_FAIL_OP_INCR_SAT = 0x00000300,
	DS_STENCIL_BACK_DEPTH_FAIL_OP_DECR_SAT = 0x00000400,
	DS_STENCIL_BACK_DEPTH_FAIL_OP_INVERT = 0x00000500,
	DS_STENCIL_BACK_DEPTH_FAIL_OP_INCR = 0x00000600,
	DS_STENCIL_BACK_DEPTH_FAIL_OP_DECR = 0x00000700,
	DS_STENCIL_BACK_PASS_OP_KEEP = 0x00000000,
	DS_STENCIL_BACK_PASS_OP_ZERO = 0x00000020,
	DS_STENCIL_BACK_PASS_OP_REPLACE = 0x00000040,
	DS_STENCIL_BACK_PASS_OP_INCR_SAT = 0x00000060,
	DS_STENCIL_BACK_PASS_OP_DECR_SAT = 0x00000080,
	DS_STENCIL_BACK_PASS_OP_INVERT = 0x000000A0,
	DS_STENCIL_BACK_PASS_OP_INCR = 0x000000C0,
	DS_STENCIL_BACK_PASS_OP_DECR = 0x000000E0,
	DS_STENCIL_BACK_COMPARISON_NEVER = 0x00000004,
	DS_STENCIL_BACK_COMPARISON_LESS = 0x00000008,
	DS_STENCIL_BACK_COMPARISON_EQUAL = 0x0000000C,
	DS_STENCIL_BACK_COMPARISON_LESS_EQUAL = 0x00000010,
	DS_STENCIL_BACK_COMPARISON_GREATER = 0x00000014,
	DS_STENCIL_BACK_COMPARISON_NOT_EQUAL = 0x00000018,
	DS_STENCIL_BACK_COMPARISON_GREATER_EQUAL = 0x0000001C,
	DS_STENCIL_BACK_COMPARISON_ALWAYS = 0x00000000,
};

// Blend
// Bit(byte)
enum
{
    BS_ALPHA_TO_COVERAGE_ON = 0x80000000,
	BS_ALPHA_TO_COVERAGE_OFF = 0x00000000,
	BS_INDEPENDENT_BLEND_ON = 0x40000000,
	BS_INDEPENDENT_BLEND_OFF = 0x00000000,
	BS_BLEND_ON = 0x20000000,
	BS_BLEND_OFF = 0x00000000,
	// 00000
	BS_SRC_BLEND_ZERO = 0x01000000,
	BS_SRC_BLEND_ONE = 0x00000000,
	BS_SRC_BLEND_SRC_COLOR = 0x02000000,
	BS_SRC_BLEND_INV_SRC_COLOR = 0x03000000,
	BS_SRC_BLEND_SRC_ALPHA = 0x04000000,
	BS_SRC_BLEND_INV_SRC_ALPHA = 0x05000000,
	BS_SRC_BLEND_DEST_ALPHA = 0x06000000,
	BS_SRC_BLEND_INV_DEST_ALPHA = 0x07000000,
	BS_SRC_BLEND_DEST_COLOR = 0x08000000,
	BS_SRC_BLEND_INV_DEST_COLOR = 0x09000000,
	BS_SRC_BLEND_SRC_ALPHA_SAT = 0x0A000000,
	BS_SRC_BLEND_BLEND_FACTOR = 0x0B000000,
	BS_SRC_BLEND_INV_BLEND_FACTOR = 0x0C000000,
	BS_SRC_BLEND_SRC1_COLOR = 0x0D000000,
	BS_SRC_BLEND_INV_SRC1_COLOR = 0x0E000000,
	BS_SRC_BLEND_SRC1_ALPHA = 0x0F000000,
	BS_SRC_BLEND_INV_SRC1_ALPHA = 0x10000000,
	BS_DEST_BLEND_ZERO = 0x00000000,
	BS_DEST_BLEND_ONE = 0x00100000,
	BS_DEST_BLEND_SRC_COLOR = 0x00200000,
	BS_DEST_BLEND_INV_SRC_COLOR = 0x00300000,
	BS_DEST_BLEND_SRC_ALPHA = 0x00400000,
	BS_DEST_BLEND_INV_SRC_ALPHA = 0x00500000,
	BS_DEST_BLEND_DEST_ALPHA = 0x00600000,
	BS_DEST_BLEND_INV_DEST_ALPHA = 0x00700000,
	BS_DEST_BLEND_DEST_COLOR = 0x00800000,
	BS_DEST_BLEND_INV_DEST_COLOR = 0x00900000,
	BS_DEST_BLEND_SRC_ALPHA_SAT = 0x00A00000,
	BS_DEST_BLEND_BLEND_FACTOR = 0x00B00000,
	BS_DEST_BLEND_INV_BLEND_FACTOR = 0x00C00000,
	BS_DEST_BLEND_SRC1_COLOR = 0x00D0000,
	BS_DEST_BLEND_INV_SRC1_COLOR = 0x00E00000,
	BS_DEST_BLEND_SRC1_ALPHA = 0x00F00000,
	BS_DEST_BLEND_INV_SRC1_ALPHA = 0x00080000,
	BS_BLEND_OP_ADD = 0x00000000,
	BS_BLEND_OP_SUBTRACT = 0x00010000,
	BS_BLEND_OP_REV_SUBTRACT = 0x00020000,
	BS_BLEND_OP_MIN = 0x00030000,
	BS_BLEND_OP_MAX = 0x00040000,
	BS_SRC_BLEND_ALPHA_ZERO = 0x00001000,
	BS_SRC_BLEND_ALPHA_ONE = 0x00000000,
	BS_SRC_BLEND_ALPHA_SRC_COLOR = 0x00002000,
	BS_SRC_BLEND_ALPHA_INV_SRC_COLOR = 0x00003000,
	BS_SRC_BLEND_ALPHA_SRC_ALPHA = 0x00004000,
	BS_SRC_BLEND_ALPHA_INV_SRC_ALPHA = 0x00005000,
	BS_SRC_BLEND_ALPHA_DEST_ALPHA = 0x00006000,
	BS_SRC_BLEND_ALPHA_INV_DEST_ALPHA = 0x00007000,
	BS_SRC_BLEND_ALPHA_DEST_COLOR = 0x00008000,
	BS_SRC_BLEND_ALPHA_INV_DEST_COLOR = 0x00009000,
	BS_SRC_BLEND_ALPHA_SRC_ALPHA_SAT = 0x0000A000,
	BS_SRC_BLEND_ALPHA_BLEND_FACTOR = 0x0000B000,
	BS_SRC_BLEND_ALPHA_INV_BLEND_FACTOR = 0x0000C000,
	BS_SRC_BLEND_ALPHA_SRC1_COLOR = 0x0000D000,
	BS_SRC_BLEND_ALPHA_INV_SRC1_COLOR = 0x0000E000,
	BS_SRC_BLEND_ALPHA_SRC1_ALPHA = 0x0000F000,
	BS_SRC_BLEND_ALPHA_INV_SRC1_ALPHA = 0x00000800,
	BS_DEST_BLEND_ALPHA_ZERO = 0x00000000,
	BS_DEST_BLEND_ALPHA_ONE = 0x00000100,
	BS_DEST_BLEND_ALPHA_SRC_COLOR = 0x00000200,
	BS_DEST_BLEND_ALPHA_INV_SRC_COLOR = 0x00000300,
	BS_DEST_BLEND_ALPHA_SRC_ALPHA = 0x00000400,
	BS_DEST_BLEND_ALPHA_INV_SRC_ALPHA = 0x00000500,
	BS_DEST_BLEND_ALPHA_DEST_ALPHA = 0x00000600,
	BS_DEST_BLEND_ALPHA_INV_DEST_ALPHA = 0x00000700,
	BS_DEST_BLEND_ALPHA_DEST_COLOR = 0x00000080,
	BS_DEST_BLEND_ALPHA_INV_DEST_COLOR = 0x00000180,
	BS_DEST_BLEND_ALPHA_SRC_ALPHA_SAT = 0x00000280,
	BS_DEST_BLEND_ALPHA_BLEND_FACTOR = 0x00000380,
	BS_DEST_BLEND_ALPHA_INV_BLEND_FACTOR = 0x00000480,
	BS_DEST_BLEND_ALPHA_SRC1_COLOR = 0x00000580,
	BS_DEST_BLEND_ALPHA_INV_SRC1_COLOR = 0x00000680,
	BS_DEST_BLEND_ALPHA_SRC1_ALPHA = 0x00000780,
	BS_DEST_BLEND_ALPHA_INV_SRC1_ALPHA = 0x00000040,
	BS_BLEND_OP_ALPHA_ADD = 0x00000000,
	BS_BLEND_OP_ALPHA_SUBTRACT = 0x00000001,
	BS_BLEND_OP_ALPHA_REV_SUBTRACT = 0x00000002,
	BS_BLEND_OP_ALPHA_MIN = 0x00000003,
	BS_BLEND_OP_ALPHA_MAX = 0x00000004,
};

// 색상/알파 혼합 상태 객체 Blending State Objects
enum BLEND_STATE
{
	BS_DEFAULT,		//기본혼합 객체.
	BS_ADD,			//덧셈.

	BS_MAX_
};


class FJRenderingEngine
{				  
private:		  
	static FJRenderingEngine* _pInstance;
				  
	//-------------------
	// 렌더링 관련 A데이터
	//-------------------

	// 장치 상태 및 렌더링 명령 관리 인터페이스.
	LPDEVICE	_pDevice;
	LPDXDC		_pDXDC;
	LPSWAPCHAIN	_pSwapChain;
	LPRTVIEW	_pRTView;

	//깊이 스텐실 버퍼 관련.
	ID3D11Texture2D*		 _pDS;			// 깊이-스텐실 버퍼.
	ID3D11DepthStencilView*  _pDSView;		// 깊이-스텐실 뷰.

	// 무슨색으로 백버퍼를 지울지
	static COLOR _clearCol;

	//상태 객체 배열 : "기능별" 그룹으로 관리합니다.
	unordered_map<DWORD, ID3D11RasterizerState*> _RSStateMap;

	// 깊이/스텐실 버퍼 상태객체.	
	unordered_map<DWORD, ID3D11DepthStencilState*> _DSStateMap;

	// 색상/알파 혼합 관리 객체
	ID3D11BlendState* _pBState[BS_MAX_] = { nullptr, };

private:
	FJRenderingEngine();

	bool CreateRenderingEngine(HWND i_hWnd);

	bool DXSetup(HWND i_hWnd);
	void DXRelease();

	bool CreateDeviceSwapChain(HWND i_hWnd);
	bool CreateRenderTarget();
	bool CreateDepthStencil();

	void SetViewPort();
	void GetDeviceInfo();
	void GetFeatureLevel();

	// 장치 상태 객체 생성/제거
	void StateObjectCreate();
	void StateObjectRelease();

	// 레스터 상태객체
	void RasterStateLoad();
	void RasterStateRelease();
	void RasterStateCreate(byte flag);

	// 깊이/스텐실 버퍼 상태객체
	void DSStateLoad();
	void DSStateCreate(DWORD state);
	void DSStateRelease();

	// 블랜드 상태객체
	void BlendStateCreate();
	void BlendStateRelease();

	void ClearBackBuffer();
	void Flip();

	static void FJErrorW(TCHAR* file, UINT line, TCHAR* func, BOOL bMBox, HRESULT hr, TCHAR* msg, ...);

public:
	~FJRenderingEngine();

	static FJRenderingEngine* GetInstance();

	static void		SetRSState(byte flag);
	static void		SetDSState(DWORD flag, UINT stencilRef);
	static void		SetBlendState(BLEND_STATE bs);
	static void		SetClearColor(COLOR& i_col);
	static COLOR	GetClearColor();
	
	// void FJSystemEngine::Run(), bool FJSystemEngine::CreateEngine()
	friend class FJSystemEngine;

	friend class CShader;
	friend class Renderer;
};

#define FJError(hr, msg, ...)  \
FJRenderingEngine::FJErrorW( __FILEW__, __LINE__, __FUNCTIONW__, TRUE, hr, msg, __VA_ARGS__ )